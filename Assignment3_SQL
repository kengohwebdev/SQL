USE Northwind
GO


--Q1.Create a view named “view_product_order_[your_last_name]”, 
--  list all products and total ordered quantity for that product.


Create View view_product_order_GOH 
AS
(
Select od.ProductID, ProductName, SUM(Quantity) AS [TotalQty]
FROM Products p
	JOIN [Order Details] od
		ON p.ProductID = od.ProductID
			JOIN [Orders] o
				ON o.OrderID = od.OrderID
GROUP BY  od.ProductID, ProductName

)

SELECT * FROM dbo.view_product_order_GOH
ORDER BY [TotalQty] DESC




--Q2. Create a stored procedure “sp_product_order_quantity_[your_last_name]” 
--   that accept product id as an input and total quantities of order as output parameter.


Create Proc sp_product_order_quantity_GOH
@pID INT
As
Begin
	Select od.ProductID, ProductName, SUM(Quantity) AS [TotalQty]
	FROM Products p
	JOIN [Order Details] od
		ON p.ProductID = od.ProductID
			JOIN [Orders] o
				ON o.OrderID = od.OrderID
	WHERE od.ProductID = @pID
	GROUP BY  od.ProductID, ProductName	
End

Exec sp_product_order_quantity_GOH 60




--Q3.Create a stored procedure “sp_product_order_city_[your_last_name]” 
--   that accept product name as an input and top 5 cities that ordered most 
--   that product combined with the total quantity of that product ordered from that city as output.


Create Proc sp_product_order_city_GOH
@pName VARCHAR(30) 
AS
BEGIN
	Select TOP 5 ShipCity AS City, ProductName, od.ProductID, SUM(Quantity) AS [Total Qty],
	dense_rank() OVER (ORDER BY SUM(Quantity) DESC) "Dense Rank"
	FROM Products p
	JOIN [Order Details] od
		ON p.ProductID = od.ProductID
			JOIN [Orders] o
				ON o.OrderID = od.OrderID
	WHERE ProductName = @pName 
	GROUP BY  ShipCity, ProductName, od.ProductID
END

Exec sp_product_order_city_GOH 'Camembert Pierrot'




--Q4.Create 2 new tables “people_your_last_name” “city_your_last_name”. 


--People has three records: {id:1, Name: Aaron Rodgers, City: 2}, {id:2, Name: Russell Wilson, City:1}, {Id: 3, Name: Jody Nelson, City:2}. 
CREATE TABLE people_GOH 
(
	peopleId INT, 
	peopleName VARCHAR(30), 
	CityID INT
)
INSERT people_GOH 
VALUES
(1, 'Aaron Rodgers', 2),
(2, 'Russell Wilson', 3),
(3, 'Jody Nelson', 3)
SELECT * FROM people_GOH
GO

--City table has two records: {Id:1, City: Seattle}, {Id:2, City: Green Bay}. 
CREATE TABLE city_GOH 
(
	CityID INT,  
	CityName VARCHAR(30)
)
INSERT city_GOH VALUES
(1, 'Seattle'),
(2, 'Green Bay')
Select * From city_GOH
GO





--If any error occurred, no changes should be made to DB. 
--BEGIN (Note: Hover codes from begin to end for @testing table)

Declare @testing TABLE
(
	peopleId INT,
	peopleName VARCHAR(30),
	CityID INT,
	CityName VARCHAR(30)
)

Insert @testing 
SELECT p.peopleID, p.peopleName, p.CityID, c.CityName
		FROM people_GOH p
			 full join city_GOH c
				ON c.CityID=p.CityID

--Remove city of Seattle if peopleID is null
Declare @ctName VARCHAR(30)
--Try test with 'Green Bay' to show the update on CityID and CityName 
Set @ctName = 'Seattle'
DELETE FROM @testing WHERE CityName = @ctName AND peopleID IS NULL

--If there was anyone from Seattle, put them into a new city “Madison”.
UPDATE @testing
SET CityName = 'Madison' WHERE CityName = @ctName
UPDATE @testing
SET CityID = 4 WHERE CityName = @ctName

Select * From @testing
GO

--END 




--Create a view “Packers_your_name” lists all people from Green Bay. 
Create View Packers_Ken_Goh
AS
(
	SELECT p.peopleID, p.peopleName, p.CityID, c.CityName
		FROM city_GOH c
			 full join people_GOH p
				ON c.CityID=p.CityID
   WHERE c.CityName = 'GREEN BAY'
)

SELECT * FROM dbo.Packers_Ken_Goh

--(after test) Drop both tables and view.
DROP VIEW IF exists
dbo.Packers_Ken_Goh

DROP TABLE IF exists
city_GOH

DROP TABLE IF exists
people_GOH





--5.       Create a stored procedure “sp_birthday_employees_[you_last_name]” that creates a new table “birthday_employees_your_last_name” and fill it with all employees that have a birthday on Feb. (Make a screen shot) drop the table. Employee table should not be affected.


CREATE PROCEDURE sp_birthday_employees_GOH
AS

DECLARE @birthday_employees_GOH TABLE
(
	EmployeeID INT,
	BirthMonth VARCHAR(30)
)

Insert @birthday_employees_GOH 
SELECT EmployeeID, BirthMonth
FROM Employees
WHERE BirthMonth ='February'

SELECT *
FROM @birthday_employees_GOH 

EXEC sp_birthday_employees_GOH


DROP PROCEDURE if exists
dbo.sp_birthday_employees_GOH

DROP TABLE if exists
birthday_employees_GOH 


--6.      How do you make sure two tables have the same data?

Users can compare two tables using UNION ALL.
UNION allows users to compare data from two similar tables or data sets.
It also handles the null values so it quickly checking what are the data missing or changed in either table.
