Conceptual Questions:


Difference between WHERE and HAVING?

The main difference is WHERE cannot filter by aggregate function but HAVING can. 
WHERE can be used with SELECT, UPDATE, DELETE, but HAVING can only be used with SELECT.
WHERE Clause is used to filter the records from the table based on the specific condition before the data is aggregrated or grouped.
HAVING Clause of the SELECT statement is based on the specific condition on a query using GROUP BY or an aggregated value.
The HAVING Clause is used after the GROUP BY clause. HAVING qualifies the aggregated data after the data has been grouped or aggregated.
SQL Execution Order:
From/Join -> Where -> Group By -> Having -> Select -> Distinct -> Order By



Difference between RANK() and DenseRank()

RANK() gives you the ranking within your ordered partition. Ties are assigned the same rank, with the next ranking(s) skipped. So, if you have 3 items at rank 2, the next rank listed would be ranked 5.
DENSE_RANK() again gives you the ranking within your ordered partition, but the ranks are consecutive. No ranks are skipped if there are ranks with multiple items.


What is correlated subquery?

Correlated Subquery is subquery where inner query is dependant on the outer query. 
Essentially, it is a query nested inside another query that uses values from the outer query.



Criteria of Union and Union all?

The criteria of using UNION and UNION ALL are that the number of columns.
They have the same data type associated with the column number from both result set.
They should also match in the order they are given.
Traits example is it uses FIRST SELECT satement Alias.



Difference between UNION and UNION ALL

Union vs Union All: 
1. Union removes duplicates, union all will not
2. Union the records from the first column is sorted automatically
3. Unions cannot be used in recursive CTE, while Union All can



Difference between Union and JOIN

Unions are used to combine different result sets vertically by adding rows from multiple result sets.
A JOIN is used to combine the result set by columns from two or more than two Tables.




Joins: (AdventureWorks)

USE AdventureWorks2019
Go


1. Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables. Join them and produce a result set similar to the
following.




    Country                        Province



SELECT c.Name AS Country, p.Name AS Province
FROM   Person.CountryRegion c  JOIN
             Person.StateProvince p ON c.CountryRegionCode = p.CountryRegionCode
             


2. Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables and list the countries filter them by Germany and Canada.
Join them and produce a result set similar to the following.




    Country                        Province


SELECT c.Name AS Country, p.Name AS Province
FROM   Person.CountryRegion c  JOIN
             Person.StateProvince p ON c.CountryRegionCode = p.CountryRegionCode
WHERE c.Name IN ('GERMANY' , 'CANADA')



 Using Northwind Database: (Use aliases for all the Joins)


USE Northwind
Go



3. List all Products that has been sold at least once in last 25 years.

--Join 3 tables using keys from Products, [Order Details] and Orders Tables.
--Assuming each OrderID is a succesful purchase with no return
--Check FROM [Order Details] Table WHERE OrderID IS NOT NULL for ProductID, meaning it holds a record that they have ordered at least once.
-- Use GetDate() to display current date and cast the DateRange as -25 years from today.



Declare @today datetime
Set @today = GetDate()

SELECT p.ProductID,p.ProductName, DATEADD(year, -25, @today) AS DateRange
FROM Products p
	JOIN [Order Details] od
		ON od.ProductID = p.ProductID
			JOIN Orders o
				On o.OrderID = od.OrderID
WHERE od.OrderID is not null 

	
	
	
	
4. List top 5 locations (Zip Code) where the products sold most in last 25 years.

--Use dense rank to show the same ranking position. 


SELECT Top 5 o.ShipPostalCode, SUM(Quantity) As [TotalQty],p.ProductName, DATEADD(year, -25, GetDate()) AS DateRange,
			dense_rank() OVER (ORDER BY SUM(Quantity) DESC) "Dense Rank"
FROM Products p
	JOIN [Order Details] od
		ON od.ProductID = p.ProductID
			JOIN Orders o
				On o.OrderID = od.OrderID
WHERE od.OrderID is not null 
GROUP BY ShipPostalCode, ProductName






5. List all city names and number of customers in that city.     


SELECT City, COUNT(o.CustomerID) AS [Number of Customer]
FROM [Order Details] od
	JOIN Orders o
		ON o.OrderID = od.OrderID
			JOIN Customers c
				ON o.CustomerID = c.CustomerID			
GROUP BY City
ORDER BY [Number of Customer] DESC


6. List city names which have more than 2 customers, and number of customers in that city

SELECT ShipCity, COUNT(CustomerID) AS 'TotalCust'
FROM Products p
	JOIN [Order Details] d
		On p.ProductID = d. ProductID
			JOIN Orders o
				On d.OrderID = o.OrderID
GROUP BY ShipCity
HAVING COUNT(CustomerID) > 2
ORDER BY 'TotalCust' DESC



7. Display the names of all customers  along with the  count of products they bought

	
SELECT c.ContactName, Sum(od.Quantity) [Quantity of Product Per City]
FROM [Order Details] od
	JOIN Orders o
		ON o.OrderID = od.OrderID
			JOIN Customers c
				ON o.CustomerID = c.CustomerID
				
	GROUP BY c.ContactName
	ORDER BY [Quantity of Product Per City] DESC


8. Display the customer ids who bought more than 100 Products with count of products.

SELECT o.CustomerID, Sum(od.Quantity) [Quantity of Product Per City]
FROM [Order Details] od
	JOIN Orders o
		ON o.OrderID = od.OrderID
			JOIN Customers c
				ON o.CustomerID = c.CustomerID	
	GROUP BY o.CustomerID
	HAVING Sum(od.Quantity) > 100
	ORDER BY [Quantity of Product Per City] DESC




9. List all of the possible ways that suppliers can ship their products. Display the results as below




    Supplier Company Name                Shipping Company Name




    ---------------------------------            ----------------------------------


--Suppliers -> Products -> [Order Details] -> Orders -> Shippers



SELECT DISTINCT sup.CompanyName AS [Supplier Company Name], 
		ship.CompanyName AS [Shipping Company Name]
		
FROM Suppliers sup
	INNER JOIN Products p
		ON sup.SupplierID = p.SupplierID 
			INNER JOIN [Order Details] od
				ON p.ProductID = od.ProductID 
					INNER JOIN Orders o
						ON od.OrderID = o.OrderID 
							INNER JOIN Shippers ship
								ON o.ShipVia = ship.ShipperID



10. Display the products order each day. Show Order date and Product Name.


SELECT d.ProductID, OrderDate, ProductName
FROM Orders o
	JOIN [Order Details] d
		On o.OrderID = d.OrderID
			JOIN Products p
				On d.ProductID = p.ProductID




11. Displays pairs of employees who have the same job title.

--Remove duplicates using '>' operator on WHERE condition 
-- Note: Less than or More than sign removes duplicates


 SELECT dt.[Employee 1], dt.[Employee 2]
 FROM 
 (
	SELECT e1.FirstName + ' ' + e1.LastName [Employee 1], e2.FirstName + ' ' + e2.LastName [Employee 2] 
	FROM Employees AS e1 
		INNER JOIN Employees AS e2
			ON e1.Title = e2.Title
) dt
WHERE dt.[Employee 1] > dt.[Employee 2]


12. Display all the Managers who have more than 2 employees reporting to them.




WITH empHiearchyCTE
AS
(
	SELECT EmployeeID, FirstName, ReportsTo, 1 [level]
	FROM Employees
	WHERE ReportsTo IS NULL
	UNION ALL
	SELECT e.EmployeeID, e.FirstName, e.ReportsTo, cte.[level] + 1
	FROM empHiearchyCTE cte 
		JOIN EMPLOYEES e
			ON e.ReportsTo = cte.EmployeeID
)



SELECT EmployeeID, FirstName, ReportsTo, DENSE_RANK() OVER(Order By ReportsTo DESC) [level]
FROM Employees
WHERE ReportsTo IS NULL

	




13. Display the customers and suppliers by city. The results should have the following columns


Select City, CompanyName, ContactName, 'Customers' [Type]
From Customers
	Union 
Select City, CompanyName, ContactName, 'Suppliers'[Type]
From Suppliers




City


Name


Contact Name,


Type (Customer or Supplier)





All scenarios are based on Database NORTHWIND.


14. List all cities that have both Employees and Customers.

SELECT City 
FROM Customers
WHERE City IN
(
	SELECT City FROM Employees 
)
ORDER BY CITY

15. List all cities that have Customers but no Employee.




a. 
    
 Use
sub-query

SELECT City 
FROM Customers
WHERE City NOT IN
(
	SELECT City FROM Employees 
)
ORDER BY CITY

b. 
    
 Do
not use sub-query


SELECT DISTINCT c.City 
FROM   Customers c INNER JOIN
             Orders o ON c.CustomerID = o.CustomerID INNER JOIN
             Employees e ON o.EmployeeID = e.EmployeeID
WHERE e.City != c.City 


16. List all products and their total order quantities throughout all orders.

SELECT p.ProductName,COUNT(o.OrderID) AS 'TotalOrder'
FROM Products p
JOIN [Order Details] d
	On p.ProductID = d. ProductID
JOIN Orders o
	On d.OrderID = o.OrderID
GROUP BY p.ProductName

17. List all Customer Cities that have at least two customers.


a. 
    
 Use
union


SELECT City 
FROM Customers
	EXCEPT
		SELECT City 
		FROM Customers
		GROUP BY City
		HAVING COUNT(*)=1
	UNION
		SELECT City FROM Customers
		GROUP BY City
		HAVING COUNT(*)=0


b. 
    
 Use
sub-query and no union

SELECT City 
FROM Customers 
GROUP BY City
HAVING COUNT(*) >=2


18. List all Customer Cities that have ordered at least two different kinds of products.


SELECT  o.ShipCity
FROM Orders o 
	JOIN [order details] od 
		ON o.orderid = od.orderid
	JOIN products p
		ON p.ProductID = od.ProductID
GROUP BY o.ShipCity
HAVING count(*) >=2


19. List 5 most popular products, their average price, and the customer city that ordered most quantity of it.

SELECT TOP 5 ProductID, AVG(UnitPrice) AS AvgPrice,
(
SELECT TOP 1 City FROM Customers c
	JOIN Orders o
		ON o.CustomerID = c.CustomerID
	JOIN [Order Details] od2 
		ON od2.OrderID = o.OrderID
	WHERE od2.ProductID = od1.ProductID
	GROUP BY City 
	ORDER BY SUM(Quantity) DESC
) AS City FROM [Order Details] od1
GROUP BY ProductID
ORDER BY SUM(Quantity) DESC

	     



20. List one city, if exists, that is the city from where the employee sold most orders (not the product quantity) is, and also the city of most total quantity of products ordered
from. (tip: join  sub-query)

--Inject WITH nested query to find the most product sold 
--Perform Ranking to to find the [Quantity of Product per City]
--Use TOP 1 to find the most popular city where the employee sold most order


WITH TopOrderedProduct
AS
(
	SELECT TOP 1 p.ProductID, SUM(Quantity) [SoldTotal]
	FROM Products p 
		JOIN [Order Details] od
			ON p.ProductID = od.ProductID
	GROUP BY p.ProductID 
	ORDER BY [SoldTotal] DESC
)

SELECT  dtxd.EmployeeID, dtxd.ShipCity, dtxd.[Quantity of Product Per City], dtxd.[Rank]
FROM
(
	SELECT DISTINCT TOP 1 dt.EmployeeID, dt.ShipCity, dt.[Quantity of Product Per City],
		RANK() Over(Partition By EmployeeID ORDER BY [Quantity of Product Per City] DESC) [RANK]
	FROM
	(
		SELECT o.EmployeeID, o.ShipCity, Sum(od.Quantity) [Quantity of Product Per City]
		FROM [Order Details] od
			JOIN Orders o
				ON o.OrderID = od.OrderID
		WHERE od.ProductID IN (SELECT od.ProductID FROM TopOrderedProduct)
		GROUP BY o.EmployeeID, o.ShipCity
	) dt
)dtxd
WHERE dtxd.[RANK] = 1









21. How do you remove the duplicates record of a table?

1)DISTINCT removes duplicate values.
2)SQL can remove duplicates record of a table using GORUP BY and HAVING clause.
3)Using the > or < sign also removes the duplicate.
4)The count function can be used to verify the occurance of a row and where to DELETE.
5)We can also use CTE to remove duplicate rows.

