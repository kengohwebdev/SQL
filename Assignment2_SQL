Conceptual Questions:


Difference between WHERE and HAVING?

The main difference is WHERE cannot filter by aggregate function but HAVING can. 
WHERE can be used with SELECT, UPDATE, DELETE, but HAVING can only be used with SELECT.
WHERE Clause is used to filter the records from the table based on the specific condition before the data is aggregrated or grouped.
HAVING Clause of the SELECT statement is based on the specific condition on a query using GROUP BY or an aggregated value.
The HAVING Clause is used after the GROUP BY clause. HAVING qualifies the aggregated data after the data has been grouped or aggregated.
SQL Execution Order:
From/Join -> Where -> Group By -> Having -> Select -> Distinct -> Order By



Difference between RANK() and DenseRank()

RANK() gives you the ranking within your ordered partition. Ties are assigned the same rank, with the next ranking(s) skipped. So, if you have 3 items at rank 2, the next rank listed would be ranked 5.
DENSE_RANK() again gives you the ranking within your ordered partition, but the ranks are consecutive. No ranks are skipped if there are ranks with multiple items.


What is correlated subquery?

Correlated Subquery is subquery where inner query is dependant on the outer query. 
Essentially, it is a query nested inside another query that uses values from the outer query.



Criteria of Union and Union all?

The criteria of using UNION and UNION ALL are that the number of columns.
They have the same data type associated with the column number from both result set.
They should also match in the order they are given.
Traits example is it uses FIRST SELECT satement Alias.



Difference between UNION and UNION ALL

Union vs Union All: 
1. Union removes duplicates, union all will not
2. Union the records from the first column is sorted automatically
3. Unions cannot be used in recursive CTE, while Union All can



Difference between Union and JOIN

Unions are used to combine different result sets vertically by adding rows from multiple result sets.
A JOIN is used to combine the result set by columns from two or more than two Tables.




Joins: (AdventureWorks)

USE AdventureWorks2019
Go


1. Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables. Join them and produce a result set similar to the
following.




    Country                        Province



SELECT c.Name AS Country, p.Name AS Province
FROM   Person.CountryRegion c  JOIN
             Person.StateProvince p ON c.CountryRegionCode = p.CountryRegionCode
             


2. Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables and list the countries filter them by Germany and Canada.
Join them and produce a result set similar to the following.




    Country                        Province


SELECT c.Name AS Country, p.Name AS Province
FROM   Person.CountryRegion c  JOIN
             Person.StateProvince p ON c.CountryRegionCode = p.CountryRegionCode
WHERE c.Name IN ('GERMANY' , 'CANADA')



 Using Northwind Database: (Use aliases for all the Joins)


USE Northwind
Go



3. List all Products that has been sold at least once in last 25 years.


--Assuming each OrderID is a succesful purchase with no return
--Join 3 tables using keys from Products, [Order Details] and Orders tables.


SELECT p.ProductName, o.OrderDate
FROM Products p
JOIN [Order Details] d
	On p.ProductID = d. ProductID
JOIN Orders o
	On d.OrderID = o.OrderID
	WHERE o.OrderDate > '1997-05-11 12:00:00'
	
	
	
	
4. List top 5 locations (Zip Code) where the products sold most in last 25 years.

--Use dense rank to remove ambiguous same ranking position. 
--Assuming each OrderID is counted as 1 product sold.

SELECT Top 5 o.ShipPostalCode, COUNT(o.OrderID) AS 'MostProductSold',
	dense_rank() OVER (Order by COUNT(o.OrderID) DESC) "Dense Rank"
FROM Products p
JOIN [Order Details] d
	On p.ProductID = d. ProductID
JOIN Orders o
	On d.OrderID = o.OrderID
WHERE o.OrderDate > '1997-05-11 12:00:00'
GROUP BY  o.ShipPostalCode
ORDER BY 'MostProductSold' DESC



5. List all city names and number of customers in that city.     


SELECT o.ShipCity, COUNT(o.CustomerID) AS 'NumberOfCustomer'
FROM Products p
JOIN [Order Details] d
	On p.ProductID = d. ProductID
JOIN Orders o
	On d.OrderID = o.OrderID
GROUP BY o.ShipCity




6. List city names which have more than 2 customers, and number of customers in that city

SELECT DISTINCT City
FROM Orders o 
	JOIN [Order Details] d
		ON o.OrderID = d.OrderID
	JOIN Customers c
		ON c.CustomerID = o.CustomerID
	Group BY City
	HAVING COUNT(*) >=2





7. Display the names of all customers  along with the  count of products they bought

SELECT c.ContactName, COUNT(o.OrderID) as 'ProductBought'
FROM Customers c
JOIN Orders o
	On c.CustomerID = o.CustomerID
GROUP BY c.ContactName



8. Display the customer ids who bought more than 100 Products with count of products.

SELECT c.CustomerID, COUNT(o.OrderID) as 'ProductBought'
FROM Customers c
JOIN Orders o
	On c.CustomerID = o.CustomerID
GROUP BY c.CustomerID
HAVING COUNT(o.OrderID) > 100
ORDER BY 'ProductBought' DESC




9. List all of the possible ways that suppliers can ship their products. Display the results as below




    Supplier Company Name                Shipping Company Name




    ---------------------------------            ----------------------------------


SELECT Suppliers.CompanyName AS "Supplier Company Name", Shippers.CompanyName AS "Shipping Company Name"
FROM   Suppliers CROSS JOIN Shippers




10. Display the products order each day. Show Order date and Product Name.


SELECT d.ProductID, o.OrderDate, p.ProductName
FROM Orders o
JOIN [Order Details] d
	On o.OrderID = d.OrderID
JOIN Products p
	On d.ProductID = p.ProductID




11. Displays pairs of employees who have the same job title.

--Remove duplicates using where condition

SELECT 
t1.EmployeeID ,t1.FirstName,t1.LastName ,t1.title ,t2.EmployeeID ,t2.FirstName,t2.LastName ,t2.title 
FROM Employees t1
 LEFT JOIN Employees t2 ON t2.title = t1.title 
 WHERE (t1.FirstName != t2.FirstName AND t1.LastName != t2.LastName)



12. Display all the Managers who have more than 2 employees reporting to them.


 SELECT FirstName, LastName
 FROM Employees
 WHERE Title = 'Sales Manager'
 GROUP BY FirstName, LastName
 HAVING COUNT(ReportsTo) > 2


13. Display the customers and suppliers by city. The results should have the following columns

Select City, CompanyName, ContactName, 'Customers' [Type]
From Customers
Union All
Select City, CompanyName, ContactName, 'Suppliers'[Type]
From Suppliers




City


Name


Contact Name,


Type (Customer or Supplier)





All scenarios are based on Database NORTHWIND.


14. List all cities that have both Employees and Customers.


15. List all cities that have Customers but no Employee.




a. 
    
 Use
sub-query

SELECT City 
FROM Customers
WHERE City NOT IN
(
	SELECT City FROM Employees 
)
ORDER BY CITY

b. 
    
 Do
not use sub-query


SELECT DISTINCT e.City AS [EmpInCity],c.City AS [CustInCity]
FROM Employees e
JOIN Orders d
	On e.EmployeeID = d. EmployeeID
JOIN Customers c
	On d.CustomerID = c.CustomerID
ORDER BY e.City



16. List all products and their total order quantities throughout all orders.

SELECT p.ProductName,COUNT(o.OrderID) AS 'TotalOrder'
FROM Products p
JOIN [Order Details] d
	On p.ProductID = d. ProductID
JOIN Orders o
	On d.OrderID = o.OrderID
GROUP BY p.ProductName

17. List all Customer Cities that have at least two customers.


a. 
    
 Use
union


SELECT City 
FROM Customers
	EXCEPT
		SELECT City 
		FROM Customers
		GROUP BY City
		HAVING COUNT(*)=1
	UNION
		SELECT City FROM Customers
		GROUP BY City
		HAVING COUNT(*)=0


b. 
    
 Use
sub-query and no union

SELECT City 
FROM Customers 
GROUP BY City
HAVING COUNT(*) >=2


18. List all Customer Cities that have ordered at least two different kinds of products.

Select distinct c.City
FROM Customers c
JOIN Orders o
	On c.CustomerID = o.CustomerID
JOIN [Order Details] d
	On o.OrderID = d.OrderID

19. List 5 most popular products, their average price, and the customer city that ordered most quantity of it.

SELECT TOP 5 ProductID, AVG(UnitPrice) AS AvgPrice,
(
SELECT TOP 1 City FROM Customers c
	JOIN Orders o
		ON o.CustomerID = c.CustomerID
	JOIN [Order Details] od2 
		ON od2.OrderID = o.OrderID
	WHERE od2.ProductID = od1.ProductID
	GROUP BY City 
	ORDER BY SUM(Quantity) DESC
) AS City FROM [Order Details] od1
GROUP BY ProductID
ORDER BY SUM(Quantity) DESC

	     



20. List one city, if exists, that is the city from where the employee sold most orders (not the product quantity) is, and also the city of most total quantity of products ordered
from. (tip: join  sub-query)


SELECT Employees_1.EmployeeID, Employees.EmployeeID AS Expr1, Orders.OrderID
FROM   Employees INNER JOIN
             Employees AS Employees_1 ON Employees.ReportsTo = Employees_1.EmployeeID INNER JOIN
             Orders ON Employees.EmployeeID = Orders.EmployeeID AND Employees_1.EmployeeID = Orders.EmployeeID
	     


21. How do you remove the duplicates record of a table?
SQL can remove duplicates record of a table using GORUP BY and HAVING clause. The count function can be used to verify the occurance of a row and where to DELETE.

